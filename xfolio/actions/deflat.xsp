<?xml version="1.0"?><xsp:page language="java" xmlns:xsp="http://apache.org/xsp" >	<xsp:structure>		<xsp:include>org.apache.cocoon.environment.Session</xsp:include>		<xsp:include>java.util.zip.*</xsp:include>		<xsp:include>java.util.*</xsp:include>		<xsp:include>java.io.*</xsp:include>		<xsp:include>org.apache.avalon.framework.context.ContextException</xsp:include>		<xsp:include>org.apache.cocoon.environment.Redirector</xsp:include>		<xsp:include>org.apache.cocoon.acting.ServerPagesAction</xsp:include>		<xsp:include>java.util.Map</xsp:include>	</xsp:structure>	<!--	This xsp don't use cocoon taglib action.xsl 	(less easier than a simple java line)		When an entry in a zip is requested, it is deflated as a file		workaround of jar:protocol which seems not easy to refresh-->	<xsp:logic>      private Redirector actionRedirector;      private Map actionResultMap;	// get from cocoon2.0 sources, perhaps there's better somewhere	/** Contextualize this class */	File context_work_dir;  File default_context_dir;		public void contextualize(Context context) throws ContextException {		context_work_dir = (File) context.get(Constants.CONTEXT_WORK_DIR);		// default_context_dir=(File) context.get(Constants.DEFAULT_CONTEXT_DIR);	}		</xsp:logic>	<view>		<xsp:logic><![CDATA[       this.actionRedirector = (Redirector)this.objectModel.get(ServerPagesAction.REDIRECTOR_OBJECT);      this.actionResultMap = (Map)this.objectModel.get(ServerPagesAction.ACTION_RESULT_OBJECT);      if (this.actionRedirector == null) {        throw new ProcessingException("action logicsheet cannot be used in generators");      }	String entry=parameters.getParameter("entry", null);	String path=parameters.getParameter("path", null);	String zip=parameters.getParameter("zip", null);	File file=new File(context_work_dir, path +"/"+ entry);  // System.out.println("file : " + file);  // work around for bad catalog config in OpenOffice doc  File dtd=new File(context_work_dir, path+ "/office.dtd");  if (!dtd.isFile()) {    dtd.getParentFile().mkdirs();    dtd.createNewFile();  }	// try absolute or relative 	File zipFile=new File(zip);	if (! zipFile.isFile()) {    // there's probably better some where else    // TODO, put the same in params.xsp    // get the directory of the sitemap ?    // URI asked to the servlet    // CAUTION! will not work in case of more than one xfolio    //  System.out.println("entry : " + entry);    //  System.out.println(zip + " ?"+ context.getResource(zip) + "?" );      zipFile=new File(context.getResource(zip).getFile());  }  if (! zipFile.isFile()) {     throw new ProcessingException ("Action, deflat.xsp, file not found : "    + zipFile + " debug : " );   }	// zip newer, deflat requested file	if( file.lastModified() <= zipFile.lastModified() ) {	ZipInputStream in = new ZipInputStream(new FileInputStream(zipFile));		// loop on the entry, match by a startsWith, regexp will mean 1.4	  ZipEntry zipEntry;	  do {		  zipEntry = in.getNextEntry();	  } while (zipEntry!=null &&  !zipEntry.getName().equals(entry)  );	  if (zipEntry==null) throw new ProcessingException ("Action, deflat.xsp, entry not found : " + entry + " in file : " + zipFile);		file.getParentFile().mkdirs();				// 2004-02-04 frederic.glorieux@ajlsm.com, deflat somewhere else, perhaps enough to fix a cache problem				File tmp=new File(file.getParentFile(), "_"+file.getName());		OutputStream out = new FileOutputStream(tmp);		byte[] buf = new byte[1024];		int len;		while ((len = in.read(buf)) > 0) {			out.write(buf, 0, len);		}		// 		// Close the streams		out.close();		in.close();		file.delete();		tmp.renameTo(file);	}		// give the path of generated file as a sitemap parameter	this.actionResultMap.put("file", file);	this.actionResultMap.put("parent", file.getParent());	// action always true to have better debug information	try {			if (true) this.objectModel.put(ServerPagesAction.ACTION_SUCCESS_OBJECT, Boolean.TRUE);		else this.objectModel.put(ServerPagesAction.ACTION_SUCCESS_OBJECT, Boolean.FALSE);	} 	catch (Exception e) {this.objectModel.put(ServerPagesAction.ACTION_SUCCESS_OBJECT, Boolean.FALSE);} ]]></xsp:logic>	</view></xsp:page>