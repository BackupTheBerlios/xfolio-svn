<?xml version="1.0"?>
<!--
created 2004-07-02

FG:frederic.glorieux@xfolio.org

(c) xfolio.org, ajlsm.com, strabon.org
Licence : GPL

Resources for text transform with chaperon

  history/features
FG:2004-06-28  creation from forrest.xmap

-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:generators default="file">
      <map:generator name="text2xml" logger="sitemap.generator.textgenerator" src="org.apache.cocoon.generation.TextGenerator">
        <parameter name="localizable" value="true"/>
      </map:generator>
    </map:generators>
    <map:transformers default="xslt">
      <map:transformer name="lexer" src="org.apache.cocoon.transformation.LexicalTransformer" logger="sitemap.transformer.lexer">
        <parameter name="localizable" value="true"/>
      </map:transformer>
      <map:transformer name="parser" src="org.apache.cocoon.transformation.ParserTransformer" logger="sitemap.transformer.parser">
        <parameter name="flatten" value="true"/>
        <parameter name="recovery" value="true"/>
        <parameter name="localizable" value="true"/>
      </map:transformer>
      <map:transformer name="extparser" src="org.apache.cocoon.transformation.ExtendedParserTransformer" logger="sitemap.transformer.extendedparser">
	   </map:transformer>
    </map:transformers>
  </map:components>
  <map:pipelines>
    <map:pipeline>
      <!--
        <map:when test="{project:content.xdocs}{uri}.cwiki">
          <map:match type="regexp" pattern="^(.*?)([^/]*).xml$">
            <map:generate type="text2xml" src="{project:content.xdocs}{1}{2}.cwiki" />
            <map:transform type="lexer"   src="cocoon:/wiki.xlex"/>
            <map:transform type="parser"  src="cocoon:/wiki.xgrm"/>
            <map:transform type="xsltc" 
              src="{forrest:home}/context/resources/chaperon/stylesheets/wiki2xdoc.xsl">
              <map:parameter name="name" value="{2}" />
            </map:transform>
            <map:serialize type="xml-document"/>
          </map:match>
        </map:when>
  -->
    </map:pipeline>
    <map:pipeline type="caching" internal-only="true">
      <map:match pattern="*.xlex">
        <map:select type="exists">
          <map:when test="resources/chaperon/grammars/{1}.xlex">
            <map:read src="resources/chaperon/grammars/{1}.xlex"/>
          </map:when>
          <map:otherwise>
            <map:generate type="text2xml" src="{forrest:home}/context/resources/chaperon/grammars/{1}.grm"/>
            <map:transform type="lexer" src="{forrest:home}/context/resources/chaperon/grammars/grm.xlex"/>
            <map:transform type="parser" src="{forrest:home}/context/resources/chaperon/grammars/grm.xgrm"/>
            <map:transform src="{forrest:home}/context/resources/chaperon/stylesheets/text4regex.xsl"/>
            <map:transform type="lexer" src="{forrest:home}/context/resources/chaperon/grammars/regex.xlex"/>
            <map:transform type="parser" src="{forrest:home}/context/resources/chaperon/grammars/regex.xgrm"/>
            <map:transform src="{forrest:home}/context/resources/chaperon/stylesheets/grm2xlex.xsl"/>
            <map:serialize type="xml"/>
          </map:otherwise>
        </map:select>
      </map:match>
      <map:match pattern="*.xgrm">
        <map:select type="exists">
          <map:when test="resources/chaperon/grammars/{1}.xgrm">
            <map:read src="resources/chaperon/grammars/{1}.xgrm"/>
          </map:when>
          <map:otherwise>
            <map:generate type="text2xml" src="{forrest:home}/context/resources/chaperon/grammars/{1}.grm"/>
            <map:transform type="lexer" src="{forrest:home}/context/resources/chaperon/grammars/grm.xlex"/>
            <map:transform type="parser" src="{forrest:home}/context/resources/chaperon/grammars/grm.xgrm"/>
            <map:transform src="{forrest:home}/context/resources/chaperon/stylesheets/text4regex.xsl"/>
            <map:transform type="lexer" src="{forrest:home}/context/resources/chaperon/grammars/regex.xlex"/>
            <map:transform type="parser" src="{forrest:home}/context/resources/chaperon/grammars/regex.xgrm"/>
            <map:transform src="{forrest:home}/context/resources/chaperon/stylesheets/grm2xgrm.xsl"/>
            <map:serialize type="xml"/>
          </map:otherwise>
        </map:select>
      </map:match>
      <map:match pattern="*.xegrm">
        <map:select type="exists">
          <map:when test="{forrest:home}/context/resources/chaperon/grammars/{1}.xegrm">
            <map:read src="{forrest:home}/context/resources/chaperon/grammars/{1}.xegrm"/>
          </map:when>
          <map:otherwise>
            <map:generate type="text2xml" src="{forrest:home}/context/resources/chaperon/grammars/{1}.egrm"/>
            <map:transform type="extparser" src="{forrest:home}/context/resources/chaperon/grammars/egrm.xegrm"/>
            <map:transform src="{forrest:home}/context/resources/chaperon/stylesheets/egrm2xegrm.xsl"/>
            <map:serialize type="xml"/>
          </map:otherwise>
        </map:select>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
